#!/usr/bin/env node

// 서버를 실행하는 스크립트. 포맷은 자바스크립튼데, 확장자를 따로 표기하진 않고, 맨 윗줄이 node에서 인식케 하는 명령어.
// package.json 에서 start 스크립트에 이 파일을 가장 먼저 실행하도록 나와있다. 
// app, debug, http를 각각 불러옴
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('learn-express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); // argument로 function 안에 넣어줄 땐, 계산식의 결과값이 아니라 둘 중 존재하는 값으로 할당.
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app); //app으로 서버 만들기.

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError); // 에러 이벤트 발생시 onError 함수 실행
server.on('listening', onListening); // listening 이벤트시 onListening 함수 실행


// 아래는 사용되는 함수들. 나중에 지정되어도 상관 없다.

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
